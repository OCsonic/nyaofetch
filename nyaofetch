#!/bin/bash
###########################
### Importing Resources ###
###########################
source /etc/nyaofetch/configuration

################
### Cosmetic ###
################
export CF="\e[0m" && export BT="\e[1m"
if [[ "$ColorBlockSetForeground" == "1" ]]; then
	export Clfg0="\e[30m" && export Clfg1="\e[31m" && export Clfg2="\e[32m" && export Clfg3="\e[33m" && export Clfg4="\e[34m" && export Clfg5="\e[35m" && export Clfg6="\e[36m" && export Clfg7="\e[37m"
	export Cdfg0="\e[90m" && export Cdfg1="\e[91m" && export Cdfg2="\e[92m" && export Cdfg3="\e[93m" && export Cdfg4="\e[94m" && export Cdfg5="\e[95m" && export Cdfg6="\e[96m" && export Cdfg7="\e[97m"
fi
if [[ "$ColorBlockSetBackground" == "1" ]]; then
	export Clbg0="\e[40m" && export Clbg1="\e[41m" && export Clbg2="\e[42m" && export Clbg3="\e[43m" && export Clbg4="\e[44m" && export Clbg5="\e[45m" && export Clbg6="\e[46m" && export Clbg7="\e[47m"
	export Cdbg0="\e[100m" && export Cdbg1="\e[101m" && export Cdbg2="\e[102m" && export Cdbg3="\e[103m" && export Cdbg4="\e[104m" && export Cdbg5="\e[105m" && export Cdbg6="\e[106m" && export Cdbg7="\e[107m"
fi
export UNC="\\$(set | grep $UNC | grep -o "e\[.*m")" && export HNC="\\$(set | grep $HNC | grep -o "e\[.*m")"
export LC="\\$(set | grep $LC | grep -o "e\[.*m")" && export SC="\\$(set | grep $SC | grep -o "e\[.*m")" && export IC="\\$(set | grep $IC | grep -o "e\[.*m")"
export BC="\\$(set | grep $BC | grep -o "e\[.*m")" && export RSC
export CBCHR
Print_ColorBlockD() { printf "$Clfg0$Clbg0$CBCHR$Clfg1$Clbg1$CBCHR$Clfg2$Clbg2$CBCHR$Clfg3$Clbg3$CBCHR$Clfg4$Clbg4$CBCHR$Clfg5$Clbg5$CBCHR$Clfg6$Clbg6$CBCHR$Clfg7$Clbg7$CBCHR$CF" ; }
Print_ColorBlockL() { printf "$Cdfg0$Cdbg0$CBCHR$Cdfg1$Cdbg1$CBCHR$Cdfg2$Cdbg2$CBCHR$Cdfg3$Cdbg3$CBCHR$Cdfg4$Cdbg4$CBCHR$Cdfg5$Cdbg5$CBCHR$Cdfg6$Cdbg6$CBCHR$Cdfg7$Cdbg7$CBCHR$CF" ; }

#########################
### Fetch Information ###
#########################
# System Info
Fetch_UserAtHostname() { printf "${UNC}$(whoami)$SC@$HNC$(hostname)$CF" ; }
Fetch_OSArch() { printf "${LC}OS$SC:$IC $(cat /etc/os-release | grep PRETTY_NAME | cut -d '"' -f 2) $(uname -m)$CF" ; }
Fetch_Kernel() { printf "${LC}Kernel$SC:$IC $(uname -sr)$CF" ; }
Fetch_Uptime() { printf "${LC}Uptime$SC:$IC $(uptime -p)$CF" ; }
# Terminal Environment
Fetch_Shell() { 
	case "$1" in
		nopath) FetchedSHELL="$(basename $SHELL)" ;;
		path) FetchedSHELL="$SHELL" ;;
	esac
	printf "${LC}Shell$SC:$IC $FetchedSHELL$CF"
}
Fetch_Term() { printf "${LC}Terminal$SC:$IC $TERM$CF" ; }
# Hardware
Fetch_CPU() { printf "${LC}CPU$SC:$IC $(uname -p)$CF" ; }
Fetch_CPUBogoMips() { printf "$IC$(cat /proc/cpuinfo | grep bogomips | head -1 | grep -o "[0-9]*\.[0-9]*")BogoMips$CF" ; }
Fetch_GPU() {
	TYPE=$1
	if [ ! "$(eval echo \${Fetch${TYPE}GPU[0]})" ]; then
		case "$TYPE" in
			Integrated) CurrentList="$(grep "VGA compatible controller:" /tmp/lspci_cache/lspci_cache.tmp | grep -E "(Intel|AMD)" | head -1 | tail -1)" ;;
			Descrete) CurrentList="$(grep "VGA compatible controller:" /tmp/lspci_cache/lspci_cache.tmp | grep -v "$(Fetch_GPU Integrated id nocolor)")" ;;
			Thunderbolt) CurrentList="$(grep "VGA compatible controller:" /tmp/lspci_cache/lspci_bolt.tmp)" ;;
		esac
		while read -r line; do
			eval export Fetch${TYPE}GPU+=\("\"\$(echo \$line | cut -d\" \" -f 5-)\""\)
			eval export Fetch${TYPE}GPUPCIID+=\("\"\$(echo \$line | grep -o "[0-9][0-9]:[0-9][0-9]\.[0-9]")\""\)
		done < <(echo "${CurrentList}")
	fi
	if [ ! "$3" ] || [[ "$TYPE" == "I" ]]; then num="0"; else num="$3"; fi
	if [[ "$3" == "nocolor" ]]; then
		if [ ! "$(eval echo -e "\${Fetch${TYPE}GPUPCIID[$num]}")" ]; then echo -e "THE STRING IS EMPTY"; fi
		case "$2" in
			dev) eval echo -e "\${Fetch${TYPE}GPU[$num]}" ;;
			id) eval echo -e "\${Fetch${TYPE}GPUPCIID[$num]}" ;;
		esac
	else
		if [ "$(eval echo -e "\${Fetch${TYPE}GPUPCIID[$num]}")" ] && [ "$(eval echo -e "\${Fetch${TYPE}GPU[$num]}")" ]; then
			case "$2" in
				dev) eval echo -e "\${LC}${TYPE}GPU\$SC: \$IC\${Fetch${TYPE}GPU[$num]}\$CF" ;;
				id) eval echo -e "\${LC}ID\$SC: \$IC\${Fetch${TYPE}GPUPCIID[$num]}\$CF" ;;
			esac
		fi
	fi
}
Fetch_RAM() {
	FetchMemLine="$(free --mega | head -2 | tail -1)"
	printf "${LC}RAM$SC: $IC$(echo "scale=$1;$(awk '{print $3}' <(echo $FetchMemLine))/1024" | bc -l)GB/$(echo "scale=$2;$(awk '{print $2}' <(echo $FetchMemLine))/1024" | bc -l)GB$CF"
}
Fetch_Swap() {
	FetchSwapLine="$(free --mega | head -3 | tail -1)"
	printf "${LC}Swap$SC: $IC$(echo "scale=$1;$(awk '{print $3}' <(echo $FetchSwapLine))/1024" | bc -l)GB/$(echo "scale=$2;$(awk '{print $2}' <(echo $FetchSwapLine))/1024" | bc -l)GB$CF"
}


#######################
### Package Manager ###
#######################
# Internal
pkgcount() { echo "$#"; }
# Output
Fetch_Packages() {
	printf "${LC}Packages$SC:"
	IFS=" " read -a fmts <<<$@
	for fmt in "${fmts[@]}"; do
		case "$fmt" in
			Pacman) printf "$IC $(pacman -Q | wc -l) (${LC}Pacman$IC)" ;;
			Portage) printf "$IC $(pkgcount /var/db/pkg/*/*/) (${LC}Portage$IC)" ;;
			Nix) printf "$IC $(nix-store -q --requisites /run/current-system/sw | wc -l) (${LC}Nix System$IC)" ;;
			Nix-User) printf "$IC $(nix-store -q --requisites /etc/profiles/per-user/$USER | wc -l) (${LC}Nix User$IC)" ;;
			Nix-HomeManager) printf "$IC $(nix-store -q --requisites ~/.nix-profile | wc -l) (${LC}Home-Manager$IC)" ;;
			Nix-Default) printf "$IC $(nix-store -q --requisites /nix/var/nix/profiles/default | wc -l) (${LC}Nix Default$IC)" ;;
			Guix) printf "$IC $(guix package -p "/run/current-system/profile" -I | wc -l) (${LC}Guix System$IC) $IC$(guix package -I | wc -l) (${LC}Guix User$IC)" ;;
			Snap) printf "$IC $(ps -e | grep -qFm 1 snapd >/dev/null && snap list | tail -n +2 | grep -v "WARNING:") (${LC}Snap$IC)" ;;
			Flatpak) printf "$IC $(flatpak list | grep system | wc -l) (${LC}Flatpak System$IC) $(flatpak list | grep user | wc -l) (${LC}Flatpak User$IC)" ;;
			AppImage) printf "$IC $(pkgcount ~/.local/bin/*.AppImage) (${LC}AppImages$IC)" ;;
		esac
	done
}

# Display Output
readarray -t AsciiLn <<< "$(envsubst < /etc/nyaofetch/custom_ascii)"
readarray -t Output < /etc/nyaofetch/output_format
source /etc/nyaofetch/output_format
### Experimental new output method to enable surrounding output with a character
#while read -r line; do
#	$line
#done < <(echo -e ${Output[0]})
#echo -e ${Output[11]}
echo "" # An extra line before the user regains control
